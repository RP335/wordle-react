{"ast":null,"code":"/**\r\n * @param language {string} two character abbreviation for language containing words for that language;\r\n * supports: de, en, es, fr\r\n * @returns {{check: (function(*=): boolean)}} a function that determines if the given word is a valid word in the\r\n * language\r\n */\nmodule.exports = function words(language) {\n  const possibleLanguages = ['de', 'en', 'es', 'fr'];\n  language = language && language.toLowerCase() || 'en';\n  if (possibleLanguages.indexOf(language) === -1) throw new Error(language + \" is not valid language\");\n\n  const languageRegex = require(`./word-regexes/${language}-regex.js`);\n\n  return {\n    check: word => languageRegex.test(word),\n    getValidWords: function (words) {\n      if (Array.isArray(words)) {\n        return words.filter(word => languageRegex.test(word));\n      } else {\n        var type = words == null ? \"Null\" : words == undefined ? \"Undefined\" : words.__proto__.constructor.name;\n        throw new Error(\"argument 1 must be an array. given \" + type + \" .\");\n      }\n\n      return false;\n    }\n  };\n};","map":{"version":3,"names":["module","exports","words","language","possibleLanguages","toLowerCase","indexOf","Error","languageRegex","require","check","word","test","getValidWords","Array","isArray","filter","type","undefined","__proto__","constructor","name"],"sources":["/Users/rahul.peter/Documents/front-end-learning/wordle/wordle-app/node_modules/check-if-word/index.js"],"sourcesContent":["/**\r\n * @param language {string} two character abbreviation for language containing words for that language;\r\n * supports: de, en, es, fr\r\n * @returns {{check: (function(*=): boolean)}} a function that determines if the given word is a valid word in the\r\n * language\r\n */\r\nmodule.exports = function words(language) {\r\n    const possibleLanguages = ['de', 'en', 'es', 'fr'];\r\n\r\n    language = language && language.toLowerCase() || 'en';\r\n    if (possibleLanguages.indexOf(language) === -1) throw new Error(language + \" is not valid language\");\r\n    const languageRegex = require(`./word-regexes/${language}-regex.js`);\r\n\r\n    return {\r\n        check: word => languageRegex.test(word),\r\n        getValidWords: function (words) {\r\n            if (Array.isArray(words)) {\r\n                return words.filter(word => languageRegex.test(word));\r\n\r\n            } else {\r\n                var type = ((words == null) ? \"Null\" : ((words == undefined) ? \"Undefined\" : words.__proto__.constructor.name));\r\n                throw new Error(\"argument 1 must be an array. given \" + type + \" .\");\r\n            }\r\n            return false;\r\n        },\r\n    };\r\n};\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,OAAP,GAAiB,SAASC,KAAT,CAAeC,QAAf,EAAyB;EACtC,MAAMC,iBAAiB,GAAG,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,CAA1B;EAEAD,QAAQ,GAAGA,QAAQ,IAAIA,QAAQ,CAACE,WAAT,EAAZ,IAAsC,IAAjD;EACA,IAAID,iBAAiB,CAACE,OAAlB,CAA0BH,QAA1B,MAAwC,CAAC,CAA7C,EAAgD,MAAM,IAAII,KAAJ,CAAUJ,QAAQ,GAAG,wBAArB,CAAN;;EAChD,MAAMK,aAAa,GAAGC,OAAO,CAAE,kBAAiBN,QAAS,WAA5B,CAA7B;;EAEA,OAAO;IACHO,KAAK,EAAEC,IAAI,IAAIH,aAAa,CAACI,IAAd,CAAmBD,IAAnB,CADZ;IAEHE,aAAa,EAAE,UAAUX,KAAV,EAAiB;MAC5B,IAAIY,KAAK,CAACC,OAAN,CAAcb,KAAd,CAAJ,EAA0B;QACtB,OAAOA,KAAK,CAACc,MAAN,CAAaL,IAAI,IAAIH,aAAa,CAACI,IAAd,CAAmBD,IAAnB,CAArB,CAAP;MAEH,CAHD,MAGO;QACH,IAAIM,IAAI,GAAKf,KAAK,IAAI,IAAV,GAAkB,MAAlB,GAA6BA,KAAK,IAAIgB,SAAV,GAAuB,WAAvB,GAAqChB,KAAK,CAACiB,SAAN,CAAgBC,WAAhB,CAA4BC,IAAzG;QACA,MAAM,IAAId,KAAJ,CAAU,wCAAwCU,IAAxC,GAA+C,IAAzD,CAAN;MACH;;MACD,OAAO,KAAP;IACH;EAXE,CAAP;AAaH,CApBD"},"metadata":{},"sourceType":"script"}