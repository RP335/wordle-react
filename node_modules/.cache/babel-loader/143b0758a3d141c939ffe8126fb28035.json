{"ast":null,"code":"var _jsxFileName = \"/Users/rahul.peter/Documents/front-end-learning/wordle/wordle-app/src/components/Game.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useCallback } from 'react';\nimport Board from './Board';\nimport Keypad from './Keypad';\nimport Words from '../data/Words';\nimport Navbar from './Navbar';\nimport $ from 'jquery'; // let words;\n// var checkWord = require('check-if-word');\n//     words = checkWord('en');\n// var randomWord =require('random-word-by-length');\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Game = () => {\n  _s();\n\n  const [isStarted, setIsStarted] = useState(false);\n  const [loser, setLoser] = useState(false);\n  const [res, setRes] = useState('');\n  const [currRow, setCurrRow] = useState(0);\n  const [winner, setWinner] = useState(false);\n  const [currWord, setCurrWord] = useState('');\n  const [squares, setSquares] = useState([...Array(30).fill('')]);\n  const [prevColoredSquares, setPrevColoredSquares] = useState([...Array(30).fill('')]);\n  const [tempPrevColoredSquares, setTempPrevColoredSquares] = useState([...Array(30).fill('')]);\n  const [letters, setLetters] = useState([...Array(26).fill('black')]);\n  const [firstWord, setFirstWord] = useState(false); //const [enter, setEnter] = useState(false);\n\n  const [tempLetters, setTempLetters] = useState([...Array(26).fill('black')]);\n  const [gameStatus, setGameStatus] = useState('Type words or use the key-pad');\n  const standardStatus = 'Type words or use the key-pad';\n  const handleKeyboard = useCallback(e => {\n    let letter = String(e.key);\n    letter = letter.toUpperCase();\n    console.log(letter);\n\n    if (letter.length === 1 && letter.charCodeAt(0) >= 65 && letter.charCodeAt(0) <= 90) {\n      handleKeypadClick(letter);\n    }\n\n    if (letter === 'ENTER') {\n      handleClickBigKey(letter);\n    }\n\n    if (letter === 'BACKSPACE') {\n      handleClickBigKey('DEL');\n    }\n  });\n\n  const checkIfInList = currWord => {\n    const lowerCaseCurrWord = currWord.toLowerCase();\n    const url = \"https://api.wordnik.com/v4/word.json/\" + lowerCaseCurrWord + \"/definitions?limit=500&includeRelated=false&useCanonical=false&includeTags=false&api_key=a2a73e7b926c924fad7001ca3111acd55af2ffabf50eb4ae5\";\n    let wordInList = false;\n    wordInList = $.ajax({\n      type: \"GET\",\n      url: url,\n      async: false\n    }).done(function (result) {\n      console.log(\"word exists\");\n      return true;\n    }).fail(function () {\n      console.log(\"word does not exist\");\n      return false;\n    });\n    console.log(wordInList); // return wordInList;\n  };\n\n  const handleClickBigKey = value => {\n    if (value === 'ENTER' && currWord.length >= 5) {\n      if (!checkIfInList(currWord)) {\n        setGameStatus(\"Word Doesn't exist, type another word\");\n        return;\n      }\n\n      console.log('Enter');\n      updateKeypad();\n      setCurrRow(currRow + 1);\n      if (currRow === 5) setLoser(true);\n      setCurrWord('');\n    }\n\n    if (value === 'DEL' && currWord !== '') {\n      setGameStatus(standardStatus);\n      let newWord = currWord;\n      let currIndex = currWord.length - 1 + Number(currRow * 5);\n      let newSquares = [...squares];\n      newSquares[currIndex] = '';\n      setSquares(newSquares);\n      newWord = newWord.substr(0, currWord.length - 1);\n      console.log(newWord);\n      setCurrWord(newWord);\n    }\n  };\n\n  const handleKeypadClick = value => {\n    if (!isStarted) return;\n    console.log(res);\n    let newWord = currWord + value;\n\n    if (currWord.length > 4 || winner) {\n      return;\n    }\n\n    setCurrWord(newWord);\n    let currIndex = currWord.length + Number(currRow * 5);\n    let newSquares = [...squares];\n    newSquares[currIndex] = value;\n    setSquares(newSquares);\n    setCurrWord(newWord);\n    const tempIndex = newWord.length - 1;\n    const target = newWord.charAt(tempIndex);\n    let newLetters = [...tempLetters];\n\n    if (target === res.charAt(tempIndex)) {\n      const a = String(target);\n      const index = Number(a.charCodeAt(0) - 'A'.charCodeAt(0));\n      newLetters[index] = '#538D4E';\n      setTempLetters(newLetters);\n    } else if (res.indexOf(target) !== -1) {\n      const a = String(target);\n      const index = Number(a.charCodeAt(0) - 'A'.charCodeAt(0));\n      newLetters[index] = '#B59F3B';\n      setTempLetters(newLetters);\n    } else {\n      const a = String(target);\n      const index = Number(a.charCodeAt(0) - 'A'.charCodeAt(0));\n      newLetters[index] = '#3A3A3C';\n      setTempLetters(newLetters);\n    }\n\n    let newTempPrevColoredSquares = [...tempPrevColoredSquares];\n    newTempPrevColoredSquares[currIndex] = newLetters[value.charCodeAt(0) - 'A'.charCodeAt(0)];\n    setTempPrevColoredSquares(newTempPrevColoredSquares);\n  };\n\n  const updateKeypad = () => {\n    if (currWord === res) setWinner(true);\n    setLetters(tempLetters);\n    setPrevColoredSquares([...tempPrevColoredSquares]);\n  };\n\n  const resetGame = () => {\n    setPrevColoredSquares([...Array(30).fill('')]);\n    setTempPrevColoredSquares([...Array(30).fill('')]);\n    setCurrRow(0);\n    setLetters([...Array(26).fill('black')]);\n    setTempLetters([...Array(26).fill('black')]);\n    setCurrWord('');\n    setRes(generateRandomWord());\n    setWinner(false);\n    setSquares([...Array(30).fill('')]);\n    setLoser(false);\n  };\n\n  const generateRandomWord = () => {\n    // var word = randomWord(6);\n    // while (!words.check(word) && word.length === 5){\n    //     word = randomWord(6);\n    // }\n    // return word.toLocaleUpperCase;\n    return Words[Math.floor(Math.random() * Words.length)];\n  };\n\n  const handleStartGame = () => {\n    setIsStarted(true);\n    setRes(generateRandomWord());\n  };\n\n  const renderStartPlayingButton = () => {\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleStartGame,\n      className: \"start-playing-button\",\n      children: \"Click Here to Start Playing\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 17\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    onKeyDown: e => handleKeyboard(e),\n    tabIndex: \"0\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Board, {\n        squares: squares,\n        letters: letters,\n        currRow: currRow,\n        prevColoredSquares: prevColoredSquares\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 17\n      }, this), !isStarted ? renderStartPlayingButton() : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-status\",\n        children: gameStatus\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 58\n      }, this), /*#__PURE__*/_jsxDEV(Keypad, {\n        handleClick: handleKeypadClick,\n        handleClickBigKey: handleClickBigKey,\n        letters: letters\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"reset-button\",\n        onClick: resetGame,\n        children: [winner ? 'You Won! Click here if you want another Word' : loser ? `Aww man, nice try its ${res} . Maybe Another Word?` : 'Guess the word brother, or you want different word? click here', \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 193,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Game, \"BH366hnOijKrdTZtK9C+PnXQT+g=\");\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","Board","Keypad","Words","Navbar","$","Game","isStarted","setIsStarted","loser","setLoser","res","setRes","currRow","setCurrRow","winner","setWinner","currWord","setCurrWord","squares","setSquares","Array","fill","prevColoredSquares","setPrevColoredSquares","tempPrevColoredSquares","setTempPrevColoredSquares","letters","setLetters","firstWord","setFirstWord","tempLetters","setTempLetters","gameStatus","setGameStatus","standardStatus","handleKeyboard","e","letter","String","key","toUpperCase","console","log","length","charCodeAt","handleKeypadClick","handleClickBigKey","checkIfInList","lowerCaseCurrWord","toLowerCase","url","wordInList","ajax","type","async","done","result","fail","value","updateKeypad","newWord","currIndex","Number","newSquares","substr","tempIndex","target","charAt","newLetters","a","index","indexOf","newTempPrevColoredSquares","resetGame","generateRandomWord","Math","floor","random","handleStartGame","renderStartPlayingButton"],"sources":["/Users/rahul.peter/Documents/front-end-learning/wordle/wordle-app/src/components/Game.js"],"sourcesContent":["import React, { useEffect, useState, useCallback } from 'react';\nimport Board from './Board';\nimport Keypad from './Keypad';\nimport  Words  from '../data/Words'\nimport Navbar from './Navbar';\nimport $ from 'jquery';\n// let words;\n// var checkWord = require('check-if-word');\n//     words = checkWord('en');\n// var randomWord =require('random-word-by-length');\nconst Game  = () =>{\n   \n       \n    \n   \n\n    const [isStarted, setIsStarted] = useState(false); \n    const [loser, setLoser] = useState(false); \n    const [res, setRes] = useState('');\n    const [currRow, setCurrRow] = useState(0);\n    const [winner, setWinner] = useState(false);\n    const [currWord, setCurrWord] = useState('');\n    const [squares, setSquares] = useState([...Array(30).fill('')]);\n    const [prevColoredSquares, setPrevColoredSquares] = useState([...Array(30).fill('')]);\n    const [tempPrevColoredSquares, setTempPrevColoredSquares] = useState([...Array(30).fill('')]);\n    const [letters, setLetters] = useState([...Array(26).fill('black')]);\n    const [firstWord, setFirstWord] = useState(false);\n    //const [enter, setEnter] = useState(false);\n    const [tempLetters, setTempLetters] = useState([...Array(26).fill('black')]);\n    const [gameStatus, setGameStatus] = useState('Type words or use the key-pad');\n    const standardStatus = 'Type words or use the key-pad';\n    const handleKeyboard  = useCallback((e) =>{\n        let letter = String(e.key);\n        letter = letter.toUpperCase();\n        console.log(letter);\n        \n        if (letter.length === 1 && letter.charCodeAt(0) >= 65 && letter.charCodeAt(0) <= 90){\n            handleKeypadClick(letter);\n        }\n        if (letter === 'ENTER' ){\n            handleClickBigKey(letter);\n        }\n        if (letter === 'BACKSPACE'){\n            handleClickBigKey('DEL');\n        }\n    })\n    const checkIfInList =(currWord) =>{\n        const lowerCaseCurrWord = currWord.toLowerCase();\n        const url = \"https://api.wordnik.com/v4/word.json/\" + lowerCaseCurrWord + \"/definitions?limit=500&includeRelated=false&useCanonical=false&includeTags=false&api_key=a2a73e7b926c924fad7001ca3111acd55af2ffabf50eb4ae5\";\n        let wordInList = false;\n        wordInList = $.ajax({\n            type: \"GET\",\n            url: url,\n            async: false\n        }).done(function (result) {\n            \n           \n            console.log(\"word exists\");\n            \n            return true;\n        }).fail(function () {\n            console.log(\"word does not exist\");\n            return false;\n        });\n        console.log(wordInList)\n        // return wordInList;\n    }\n    const handleClickBigKey = (value) =>{\n    \n        if (value === 'ENTER' && currWord.length >= 5){\n            if (!checkIfInList(currWord)){\n               \n                setGameStatus(\"Word Doesn't exist, type another word\");\n                return;\n            }\n            \n            console.log('Enter')\n            \n            updateKeypad();\n            setCurrRow(currRow+1); \n            if (currRow === 5)\n                setLoser(true);\n            setCurrWord('');\n        }\n        if (value === 'DEL' && currWord !== ''){\n            setGameStatus(standardStatus);\n            let newWord = currWord;\n            let currIndex = currWord.length-1 + Number(currRow * 5);\n            let newSquares = [...squares];\n            newSquares[currIndex] = '';\n            setSquares(newSquares);\n            newWord = newWord.substr(0, currWord.length-1);\n            console.log(newWord);\n            setCurrWord(newWord);\n            \n        }\n    }\n    const handleKeypadClick = (value) =>{\n        if (!isStarted)\n            return;\n        \n        console.log(res);\n        let newWord = currWord + value;\n        \n        if (currWord.length > 4 || winner){\n            return;\n        }\n        \n        setCurrWord(newWord);\n        let currIndex = currWord.length + Number(currRow * 5);\n        let newSquares = [...squares];\n        \n        newSquares[currIndex] = value;\n        setSquares(newSquares); \n        setCurrWord(newWord);\n        const tempIndex = newWord.length-1;\n        const target = newWord.charAt(tempIndex);\n        let newLetters = [...tempLetters];\n        if (target === res.charAt(tempIndex)) {\n            const a = String(target);\n            const index = Number(a.charCodeAt(0)-'A'.charCodeAt(0));\n            newLetters[index] = '#538D4E';\n            setTempLetters(newLetters);\n\n        }\n        else if (res.indexOf(target) !== -1){\n            const a = String(target);\n            const index = Number(a.charCodeAt(0)-'A'.charCodeAt(0));\n            newLetters[index] = '#B59F3B'\n            setTempLetters(newLetters);\n\n\n        }\n        else {\n            const a = String(target);\n            const index = Number(a.charCodeAt(0)-'A'.charCodeAt(0));\n            newLetters[index] = '#3A3A3C'\n\n            setTempLetters(newLetters);\n\n        }\n        let newTempPrevColoredSquares = [...tempPrevColoredSquares];\n        newTempPrevColoredSquares[currIndex] = newLetters[value.charCodeAt(0) - 'A'.charCodeAt(0)]\n        setTempPrevColoredSquares(newTempPrevColoredSquares);\n        \n        \n    }\n    const updateKeypad = () => {\n        if (currWord === res)\n            setWinner(true);\n        setLetters(tempLetters);\n       \n        setPrevColoredSquares([...tempPrevColoredSquares]);\n    }\n    const resetGame = () =>{\n        setPrevColoredSquares([...Array(30).fill('')]);\n        setTempPrevColoredSquares([...Array(30).fill('')]);\n        setCurrRow(0);\n        setLetters([...Array(26).fill('black')]);\n        setTempLetters([...Array(26).fill('black')]);\n        setCurrWord('');\n        setRes(generateRandomWord());\n        setWinner(false);\n        setSquares([...Array(30).fill('')]);\n        setLoser(false);\n        \n    }\n    const generateRandomWord =() =>{\n        // var word = randomWord(6);\n        // while (!words.check(word) && word.length === 5){\n        //     word = randomWord(6);\n        // }\n        // return word.toLocaleUpperCase;\n        return Words[Math.floor(Math.random()*Words.length)];\n\n    }\n    const handleStartGame = () =>{\n        setIsStarted(true);\n       \n        \n        setRes(generateRandomWord());\n    }\n\n    const renderStartPlayingButton = () =>{\n        \n        return (<button  onClick ={handleStartGame} className='start-playing-button'>\n            Click Here to Start Playing\n        </button>)\n\n    }\n    \n    return (\n        <div className='game' onKeyDown = {(e) =>handleKeyboard(e)} tabIndex = \"0\">\n            <Navbar>\n\n            </Navbar>       \n            <div>\n               \n                {/* <input type = 'text' onKeyDown = {(e) =>detectKeyDown(e)}></input> */}\n                <Board squares = {squares} letters = {letters} currRow = {currRow} prevColoredSquares ={prevColoredSquares} ></Board>\n                {!isStarted? renderStartPlayingButton(): <div className='game-status'>{gameStatus}</div>}\n                <Keypad   handleClick = {handleKeypadClick} handleClickBigKey ={handleClickBigKey} letters = {letters}></Keypad>\n                <button className='reset-button' onClick ={resetGame}>{winner? 'You Won! Click here if you want another Word' : loser?  `Aww man, nice try its ${res} . Maybe Another Word?`: 'Guess the word brother, or you want different word? click here'} </button>\n            </div>\n        </div>\n        \n    )\n}\nexport default Game;"],"mappings":"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"},"metadata":{},"sourceType":"module"}