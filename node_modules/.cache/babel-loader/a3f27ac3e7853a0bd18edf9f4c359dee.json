{"ast":null,"code":"var _jsxFileName = \"/Users/rahul.peter/Documents/front-end-learning/wordle/wordle-app/src/components/Game.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport Board from './Board';\nimport Keypad from './Keypad';\nimport Words from '../data/Words';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Game = () => {\n  _s();\n\n  useEffect(() => {\n    document.addEventListener('keydown', detectKeyDown, true);\n  }, []);\n\n  const detectKeyDown = e => {\n    console.log('input key ' + e.key);\n    let letter = String(e.key);\n    letter = letter.toUpperCase();\n    console.log(letter);\n\n    if (letter.charCodeAt(0) >= 65 && letter.charCodeAt(0) <= 90) {\n      handleKeypadClick(letter);\n    }\n\n    if (letter === 'ENTER' || letter === 'BACKSPACE') {\n      handleClickBigKey(letter);\n    }\n  };\n\n  const [res, setRes] = useState('WENDY');\n  const [currRow, setCurrRow] = useState(0);\n  const [winner, setWinner] = useState(false);\n  const [currWord, setCurrWord] = useState('');\n  const [squares, setSquares] = useState([...Array(30).fill('')]);\n  const [prevColoredSquares, setPrevColoredSquares] = useState([...Array(30).fill('')]);\n  const [tempPrevColoredSquares, setTempPrevColoredSquares] = useState([...Array(30).fill('')]);\n  const [letters, setLetters] = useState([...Array(26).fill('black')]);\n  const [firstWord, setFirstWord] = useState(false); //const [enter, setEnter] = useState(false);\n\n  const [tempLetters, setTempLetters] = useState([...Array(26).fill('black')]);\n\n  const handleClickBigKey = value => {\n    if (value === 'ENTER' && currWord.length >= 5) {\n      console.log('Enter');\n      updateKeypad();\n      setCurrRow(currRow + 1);\n      setCurrWord('');\n    }\n\n    if (value === 'DEL') {\n      let newWord = currWord;\n      let currIndex = currWord.length - 1 + Number(currRow * 5);\n      let newSquares = [...squares];\n      newSquares[currIndex] = '';\n      setSquares(newSquares);\n      newWord = newWord.substr(0, currWord.length - 1);\n      console.log(newWord);\n      setCurrWord(newWord);\n    }\n  };\n\n  const handleKeypadClick = value => {\n    if (!firstWord) {\n      setRes(Words[Math.floor(Math.random() * Words.length)]);\n      setFirstWord(true);\n    }\n\n    console.log(res);\n    let newWord = currWord + value;\n    console.log(currWord.length);\n\n    if (currWord.length > 4 || winner) {\n      return;\n    }\n\n    setCurrWord(newWord);\n    let currIndex = currWord.length + Number(currRow * 5);\n    let newSquares = [...squares];\n    newSquares[currIndex] = value;\n    setSquares(newSquares);\n    setCurrWord(newWord);\n    const tempIndex = newWord.length - 1;\n    const target = newWord.charAt(tempIndex);\n    let newLetters = [...tempLetters];\n\n    if (target === res.charAt(tempIndex)) {\n      const a = String(target);\n      const index = Number(a.charCodeAt(0) - 'A'.charCodeAt(0));\n      newLetters[index] = '#538D4E';\n      setTempLetters(newLetters);\n    } else if (res.indexOf(target) !== -1) {\n      const a = String(target);\n      const index = Number(a.charCodeAt(0) - 'A'.charCodeAt(0));\n      newLetters[index] = '#B59F3B';\n      setTempLetters(newLetters);\n    } else {\n      const a = String(target);\n      const index = Number(a.charCodeAt(0) - 'A'.charCodeAt(0));\n      newLetters[index] = '#3A3A3C';\n      setTempLetters(newLetters);\n    }\n\n    let newTempPrevColoredSquares = [...tempPrevColoredSquares];\n    console.log(tempPrevColoredSquares);\n    newTempPrevColoredSquares[currIndex] = newLetters[value.charCodeAt(0) - 'A'.charCodeAt(0)];\n    setTempPrevColoredSquares(newTempPrevColoredSquares);\n  };\n\n  const updateKeypad = () => {\n    if (currWord === res) setWinner(true);\n    setLetters(tempLetters);\n    setPrevColoredSquares([...tempPrevColoredSquares]);\n  };\n\n  const resetGame = () => {\n    setPrevColoredSquares([...Array(30).fill('')]);\n    setTempPrevColoredSquares([...Array(30).fill('')]);\n    setCurrRow(0);\n    setLetters([...Array(26).fill('black')]);\n    setTempLetters([...Array(26).fill('black')]);\n    setCurrWord('');\n    setRes(Words[Math.floor(Math.random() * Words.length)]);\n    setWinner(false);\n    setSquares([...Array(30).fill('')]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    children: [/*#__PURE__*/_jsxDEV(Board, {\n      squares: squares,\n      letters: letters,\n      currRow: currRow,\n      prevColoredSquares: prevColoredSquares\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Keypad, {\n      handleClick: handleKeypadClick,\n      handleClickBigKey: handleClickBigKey\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"reset-button\",\n      onClick: resetGame,\n      children: [winner ? 'You Won! Click here if you want another Word' : 'Another Word?', \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Game, \"j9bf5wCIZfMd0XC6FyAb76/UkLQ=\");\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useEffect","useState","Board","Keypad","Words","Game","document","addEventListener","detectKeyDown","e","console","log","key","letter","String","toUpperCase","charCodeAt","handleKeypadClick","handleClickBigKey","res","setRes","currRow","setCurrRow","winner","setWinner","currWord","setCurrWord","squares","setSquares","Array","fill","prevColoredSquares","setPrevColoredSquares","tempPrevColoredSquares","setTempPrevColoredSquares","letters","setLetters","firstWord","setFirstWord","tempLetters","setTempLetters","value","length","updateKeypad","newWord","currIndex","Number","newSquares","substr","Math","floor","random","tempIndex","target","charAt","newLetters","a","index","indexOf","newTempPrevColoredSquares","resetGame"],"sources":["/Users/rahul.peter/Documents/front-end-learning/wordle/wordle-app/src/components/Game.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Board from './Board';\nimport Keypad from './Keypad';\nimport  Words  from '../data/Words'\n\nconst Game  = () =>{\n\n    useEffect(() => {document.addEventListener('keydown', detectKeyDown, true)}, []);\n    const detectKeyDown = (e) =>{\n        console.log('input key ' + e.key);\n        let letter = String(e.key);\n        letter = letter.toUpperCase();\n        console.log(letter);\n        if (letter.charCodeAt(0) >= 65 && letter.charCodeAt(0) <= 90){\n            handleKeypadClick(letter);\n        }\n        if (letter === 'ENTER' || letter === 'BACKSPACE'){\n            handleClickBigKey(letter);\n        }\n    }\n    const [res, setRes] = useState('WENDY');\n    const [currRow, setCurrRow] = useState(0);\n    const [winner, setWinner] = useState(false);\n    const [currWord, setCurrWord] = useState('');\n    const [squares, setSquares] = useState([...Array(30).fill('')]);\n    const [prevColoredSquares, setPrevColoredSquares] = useState([...Array(30).fill('')]);\n    const [tempPrevColoredSquares, setTempPrevColoredSquares] = useState([...Array(30).fill('')]);\n    const [letters, setLetters] = useState([...Array(26).fill('black')]);\n    const [firstWord, setFirstWord] = useState(false);\n    //const [enter, setEnter] = useState(false);\n    const [tempLetters, setTempLetters] = useState([...Array(26).fill('black')]);\n    const handleClickBigKey = (value) =>{\n    \n        if (value === 'ENTER' && currWord.length >= 5){\n            console.log('Enter')\n            \n            updateKeypad();\n            setCurrRow(currRow+1);\n            setCurrWord('');\n        }\n        if (value === 'DEL'){\n            let newWord = currWord;\n            let currIndex = currWord.length-1 + Number(currRow * 5);\n            let newSquares = [...squares];\n            newSquares[currIndex] = '';\n            setSquares(newSquares);\n            newWord = newWord.substr(0, currWord.length-1);\n            console.log(newWord);\n            setCurrWord(newWord);\n            \n        }\n    }\n    const handleKeypadClick = (value) =>{\n        if (!firstWord){\n            setRes(Words[Math.floor(Math.random()*Words.length)]);\n            setFirstWord(true);\n\n        }\n        console.log(res);\n        let newWord = currWord + value;\n        console.log(currWord.length);\n        if (currWord.length > 4 || winner){\n            return;\n        }\n        \n        setCurrWord(newWord);\n        let currIndex = currWord.length + Number(currRow * 5);\n        let newSquares = [...squares];\n        \n        newSquares[currIndex] = value;\n        setSquares(newSquares); \n        setCurrWord(newWord);\n        const tempIndex = newWord.length-1;\n        const target = newWord.charAt(tempIndex);\n        let newLetters = [...tempLetters];\n        if (target === res.charAt(tempIndex)) {\n            const a = String(target);\n            const index = Number(a.charCodeAt(0)-'A'.charCodeAt(0));\n            newLetters[index] = '#538D4E';\n            setTempLetters(newLetters);\n\n        }\n        else if (res.indexOf(target) !== -1){\n            const a = String(target);\n            const index = Number(a.charCodeAt(0)-'A'.charCodeAt(0));\n            newLetters[index] = '#B59F3B'\n            setTempLetters(newLetters);\n\n\n        }\n        else {\n            const a = String(target);\n            const index = Number(a.charCodeAt(0)-'A'.charCodeAt(0));\n            newLetters[index] = '#3A3A3C'\n\n            setTempLetters(newLetters);\n\n        }\n        let newTempPrevColoredSquares = [...tempPrevColoredSquares];\n        console.log(tempPrevColoredSquares);\n        newTempPrevColoredSquares[currIndex] = newLetters[value.charCodeAt(0) - 'A'.charCodeAt(0)]\n        setTempPrevColoredSquares(newTempPrevColoredSquares);\n        \n        \n    }\n    const updateKeypad = () => {\n        if (currWord === res)\n            setWinner(true);\n        setLetters(tempLetters);\n       \n        setPrevColoredSquares([...tempPrevColoredSquares]);\n    }\n    const resetGame = () =>{\n        setPrevColoredSquares([...Array(30).fill('')]);\n        setTempPrevColoredSquares([...Array(30).fill('')]);\n        setCurrRow(0);\n        setLetters([...Array(26).fill('black')]);\n        setTempLetters([...Array(26).fill('black')]);\n        setCurrWord('');\n        setRes(Words[Math.floor(Math.random()*Words.length)]);\n        setWinner(false);\n        setSquares([...Array(30).fill('')]);\n        \n    }\n    \n    return (\n        <div className='game'>\n            <Board squares = {squares} letters = {letters} currRow = {currRow} prevColoredSquares ={prevColoredSquares} ></Board>\n            <Keypad   handleClick = {handleKeypadClick} handleClickBigKey ={handleClickBigKey}></Keypad>\n            <button className='reset-button' onClick ={resetGame}>{winner? 'You Won! Click here if you want another Word' : 'Another Word?'} </button>\n        </div>\n        \n    )\n}\nexport default Game;"],"mappings":"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"},"metadata":{},"sourceType":"module"}